package controllers;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;

import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Modality;
import javafx.stage.Stage;
import model.Libro;

import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.ResourceBundle;

import dao.GestionLibros;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.collections.transformation.SortedList;
import javafx.event.ActionEvent;

import javafx.scene.control.TableView;

import javafx.scene.control.TableColumn;

public class PrestamosController implements Initializable{
	@FXML
	private TableView tablaPrestamos;
	@FXML
	private TableColumn colAlumno;
	@FXML
	private TableColumn colLibro;
	@FXML
	private TableColumn colFecha;
	@FXML
	private Button btnHistorial;
	@FXML
	private Button btnDevolver;
	@FXML
	private TableView<Libro> tablaLibros;
	@FXML
	private TableColumn<Libro, String> colTitulo;
	@FXML
	private TableColumn<Libro, String> colAutor;
	@FXML
	private TableColumn<Libro, String> colEditorial;
	@FXML
	private TableColumn<Libro, String> colEstado;
	
	private ObservableList<Libro> libros;
	
	@FXML
	private Button btnPrestar;
	@FXML
	private Button btnNueboLibro;
	@FXML
	private Button btnEditarLibro;
	@FXML
	private Button btnBorrarLibro;
	@FXML
	private TextField buscarLibro;

	// Event Listener on Button[#btnHistorial].onAction
	@FXML
	public void verHistorial(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#btnDevolver].onAction
	@FXML
	public void devolverLibro(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#btnPrestar].onAction
	@FXML
	public void prestarLibro(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#btnNueboLibro].onAction
	@FXML
	public void nuevoLibro(ActionEvent event) {
		try {
			FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/NuevoEditarLibro.fxml"));
			Parent root = loader.load();
			Scene scene = new Scene(root);
			Stage stage = new Stage();
			stage.setResizable(false);
			stage.initModality(Modality.APPLICATION_MODAL);
			Stage myStage = (Stage) this.btnNueboLibro.getScene().getWindow();
			stage.initOwner(myStage);
			stage.setScene(scene);
			stage.setTitle("Nuevo libro");
			stage.showAndWait();
			cargarLibros();
		} catch (IOException e) {
			e.printStackTrace(); 
			Alert alert = new Alert(Alert.AlertType.ERROR);
			 alert.setHeaderText(null);
			 alert.setTitle("Error");
			 alert.setContentText(e.getMessage());
			 alert.showAndWait();
		 }
	}
	// Event Listener on Button[#btnEditarLibro].onAction
	@FXML
	public void editarLibro(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#btnBorrarLibro].onAction
	@FXML
	public void borrarLibro(ActionEvent event) {
		// TODO Autogenerated
	}
	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		libros = FXCollections.observableArrayList();
		tablaLibros.setItems(libros);
		colTitulo.setCellValueFactory(new PropertyValueFactory<Libro, String>("titulo"));
		colAutor.setCellValueFactory(new PropertyValueFactory<Libro, String>("autor"));
		colEditorial.setCellValueFactory(new PropertyValueFactory<Libro, String>("editorial"));
		colEstado.setCellValueFactory(new PropertyValueFactory<Libro, String>("estado"));
		
		FilteredList<Libro> filteredData = new FilteredList<>(libros, p -> true);
		
		buscarLibro.textProperty().addListener((observable, oldValue, newValue) -> {
			filteredData.setPredicate(libro -> {
				// If filter text is empty, display all persons.
				if (newValue == null || newValue.isEmpty()) {
					return true;
				}
				
				// Compare first name and last name of every person with filter text.
				String lowerCaseFilter = newValue.toLowerCase();
				
				if (libro.getTitulo().toLowerCase().contains(lowerCaseFilter)) {
					return true; // Filter matches first name.
				}
				return false; // Does not match.
			});
		});
		
		// 3. Wrap the FilteredList in a SortedList. 
		SortedList<Libro> sortedData = new SortedList<>(filteredData);
		
		// 4. Bind the SortedList comparator to the TableView comparator.
		sortedData.comparatorProperty().bind(tablaLibros.comparatorProperty());
		
		// 5. Add sorted (and filtered) data to the table.
		tablaLibros.setItems(sortedData);
		
		cargarLibros();
		
	}
	
	public void cargarLibros() {
		GestionLibros gl = new GestionLibros();
		
		ArrayList<Libro> p = gl.getLibrosNoBaja();
		
		libros.clear();
		libros.addAll(p);
	}
}
